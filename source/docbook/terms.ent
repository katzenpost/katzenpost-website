<?xml version="1.0" encoding="UTF-8"?>

<!ENTITY surb '<varlistentry>
                <term>SURB</term>
                <listitem>
                    <para>Single use reply block. SURBs are used to achieve recipient anonymity,
                        that is to say, SURBs function as a cryptographic delivery token that
                        you can give to another client entity so that they can send you a
                        message without them knowing your identity or location on the network.
                        See <literal>SPHINXSPEC</literal> and <literal>SPHINX</literal>.</para>
                </listitem>
            </varlistentry>'>
<!ENTITY blocksphinxplaintext '<varlistentry>
                <term>BlockSphinxPlaintext</term>
                <listitem>
                    <para>The payload structure which is encapsulated by the Sphinx body. It is
                        described in KATZMIXE2E, section Client and Provider processing of
                        received packets.</para>
                </listitem>
            </varlistentry>'>
<!ENTITY wireprotocol '<varlistentry>
                <term>wire protocol</term>
                <listitem>
                    <para>Refers to our PQ Noise based protocol which currently uses TCP but in the
                        near future will optionally use QUIC. This protocol has messages known as
                        wire protocol <literal>commands</literal>, which are used for various mixnet
                        functions such as sending or retrieving a message, dirauth voting etc. For
                        more information, please see our design doc: <link
                            xlink:href="https://github.com/katzenpost/katzenpost/blob/main/docs/specs/wire-protocol.md"
                            >wire protocol specification</link></para>
                </listitem>
            </varlistentry>'>
<!ENTITY providers '<varlistentry>
                <term>providers</term>
                <listitem>
                    <para>A node on the edge of the network that has two roles,
                        handling incoming client connections and running mixnet services. Soon we should
                        get rid of <literal>Providers</literal> and replace it with two different
                        sets, <literal>gateway nodes</literal> and <literal>service
                        nodes</literal>.</para>
                </listitem>
            </varlistentry>'>
<!ENTITY epoch '<varlistentry>
                <term>epoch</term>
                <listitem>
                    <para>A fixed time interval defined in section 4.2 Sphinx Mix and Provider Key
                        Rotation. The epoch is currently set to 20 minutes. 
                        A new PKI document containing public key material
                        is published for each epoch and is valid only for that epoch.</para>
                </listitem>
            </varlistentry>'>          
<!ENTITY kib '<varlistentry>
                <term>KiB</term>
                <listitem>
                    <para>Defined as 1024 8 bit octets.</para>
                </listitem>
            </varlistentry>'>
<!ENTITY mixnet '<varlistentry>
                <term>mixnet</term>
                <listitem>
                    <para>A mixnet also known as a mix network is a network of mixes that can be
                        used to build various privacy preserving protocols.</para>
                </listitem>
            </varlistentry>'>
<!ENTITY mix '<varlistentry>
                <term>mix</term>
                <listitem>
                    <para>A cryptographic router that is used to compose a mixnet. Mixes use a
                        cryptographic operation on messages being routed which provides bitwise
                        unlinkability with respect to input versus output messages. Katzenpost is a
                        decryption mixnet that uses the Sphinx cryptographic packet format.</para>
                </listitem>
            </varlistentry>'>
<!ENTITY node '<varlistentry>
                <term>node</term>
                <listitem>
                    <para>Clients are NOT considered nodes in the mix network. However note that
                        network protocols are often layered; in our design documents we describe
                        "mixnet hidden services" which can be operated by mixnet clients. Therefore
                        if you are using node in some adherence to methematical termonology one
                        could conceivably designate a client as a node. That having been said, it
                        would not be appropriate to the discussion of our core mixnet protocol to
                        refer to the clients as nodes.</para>
                </listitem>
            </varlistentry>'>
<!ENTITY entry '<varlistentry>
                <term>entry mix, entry node</term>
                <listitem>
                    <para>A mix that has some additional features: </para>
                    <itemizedlist>
                        <listitem>
                            <para> An entry mix is always the first hop in routes where the message
                                originates from a client. </para>
                        </listitem>
                        <listitem>
                            <para> An entry mix authenticates client’s direct connections via the
                                mixnet’s wire protocol. </para>
                        </listitem>
                        <listitem>
                            <para> An entry mix queues reply messages and allows clients to retrieve
                                them later. </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>'>
<!ENTITY servicemix '<varlistentry>
                <term>service mix</term>
                <listitem>
                    <para>A service mix is a mix that has some additional features:</para>
                    <itemizedlist>
                        <listitem>
                            <para> A service mix is always the last hop in routes where the message
                                originates from a client. </para>
                        </listitem>
                        <listitem>
                            <para> A service mix runs mixnet services which use a Sphinx SURB based
                                protocol. </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>'>
<!ENTITY user '<varlistentry>
                <term>user</term>
                <listitem>
                    <para>An agent using the Katzenpost system.</para>
                </listitem>
            </varlistentry>'>
<!ENTITY client '<varlistentry>
                <term>client</term>
                <listitem>
                    <para>Software run by the User on its local device to participate in the Mixnet.
                        Again let us reiterate that a client is not considered a "node in the
                        network" at the level of analysis where we are discussing the core mixnet
                        protocol in this here document.</para>
                </listitem>
            </varlistentry>'>
<!ENTITY katzenpost ' <varlistentry>
                <term>&program_name;</term>
                <listitem>
                    <para>A project to design many improved decryption mixnet protocols.</para>
                </listitem>
            </varlistentry>'>
<!ENTITY classestraffic '<varlistentry>
                <term>classes of traffic</term>
                <listitem>
                    <para>We distinguish the following classes of traffic:</para>
                    <itemizedlist>
                        <listitem>
                            <para> SURB Replies (also sometimes referred to as ACKs) </para>
                        </listitem>
                        <listitem>
                            <para> Forward messages </para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>'>
<!ENTITY msl '<varlistentry>
                <term>MSL</term>
                <listitem>
                    <para>Maximum segment lifetime, currently set to 120 seconds.</para>
                </listitem>
            </varlistentry>'>
<!ENTITY pki '<varlistentry>
                <term>PKI</term>
                <listitem>
                    <para>Public key infrastructure</para>
                </listitem>
            </varlistentry>'>
<!ENTITY dirauthsystem '<varlistentry>
                <term>directory authority system</term>
                <listitem>
                    <para>Refers to specific PKI schemes used by Mixminion and Tor.</para>
                </listitem>
            </varlistentry>'>
<!ENTITY mixdescriptor '<varlistentry>
                <term>mix descriptor</term>
                <listitem>
                    <para>A database record which describes a component mix.</para>
                </listitem>
            </varlistentry>'>
<!ENTITY family '<varlistentry>
                <term>family</term>
                <listitem>
                    <para>Identifier of security domains or entities operating one or more mixes in
                        the network. This is used to inform the path selection algorithm.</para>
                </listitem>
            </varlistentry>'>
<!ENTITY nickname '<varlistentry>
                <term>nickname</term>
                <listitem>
                    <para>A nickname string that is unique in the consensus document, see Katzenpost
                        Mix Network Specification section 2.2. Network Topology.</para>
                </listitem>
            </varlistentry>'>
<!ENTITY layer '<varlistentry>
                <term>layer</term>
                <listitem>
                    <para>The layer indicates which network topology layer a particular mix resides
                        in.</para>
                </listitem>
            </varlistentry>'>
<!ENTITY provider '<varlistentry>
                <term>provider</term>
                <listitem>
                    <para>A service operated by a third party that Clients communicate directly with
                        to communicate with the Mixnet. It is responsible for Client authentication,
                        forwarding outgoing messages to the Mixnet, and storing incoming messages
                        for the Client. The Provider MUST have the ability to perform cryptographic
                        operations on the relayed messages.</para>
                </listitem>
            </varlistentry>'>
           
<!ENTITY message '<varlistentry>
                <term>message</term>
                <listitem>
                    <para>A variable-length sequence of octets sent anonymously through the network.
                        Short messages are sent in a single packet; long messages are fragmented
                        across multiple packets.</para>
                </listitem>
            </varlistentry>'>
<!ENTITY packet '<varlistentry>
                <term>packet</term>
                <listitem>
                    <para>A Sphinx packet, of fixed
                    length for each class of traffic, carrying a message payload and metadata for routing. 
                    Packets are routed anonymously through the mixnet and cryptographically transformed at 
                    each hop.</para>
                </listitem>
            </varlistentry>'>
<!ENTITY header '<varlistentry>
                <term>header</term>
                <listitem>
                    <para>The packet header consisting of several components, which convey the
                        information necessary to verify packet integrity and correctly process the
                        packet.</para>
                </listitem>
            </varlistentry>'>
<!ENTITY payload '<varlistentry>
                <term>payload</term>
                <listitem>
                    <para>The fixed-length portion of a packet containing an encrypted message or
                        part of a message, to be delivered anonymously.</para>
                </listitem>
            </varlistentry>'>
<!ENTITY group '<varlistentry>
                <term>group</term>
                <listitem>
                    <para>A finite set of elements and a binary operation that satisfy the
                        properties of closure, associativity, invertability, and the presence of an
                        identity element. </para>
                </listitem>
            </varlistentry>'>
<!ENTITY groupelement '<varlistentry>
                <term>group element</term>
                <listitem>
                    <para>An individual element of the group.</para>
                </listitem>
            </varlistentry>'>
<!ENTITY groupgenerator '<varlistentry>
                <term>group generator</term>
                <listitem>
                    <para>A group element capable of generating any other element of the group, via
                        repeated applications of the generator and the group operation.</para>
                </listitem>
            </varlistentry>'>
<!ENTITY seda '<varlistentry>
                <term>SEDA</term>
                <listitem>
                    <para>Staged Event Driven Architecture.<!-- <link linkend="SEDA">SEDA</link>--> 1. A
                        highly parallelizable computation model. 2. A computational pipeline
                        composed of multiple stages connected by queues utilizing active queue
                        management algorithms that can evict items from the queue based on dwell
                        time or other criteria where each stage is a thread pool. 3. The only
                        correct way to efficiently implement a software based router on general
                        purpose computing hardware.</para>
                </listitem>
            </varlistentry>'>            
